#!/usr/bin/python

# This script is a wrapper to run PriME with OpenMPI

###########################################################################
#Copyright (c) 2015 Princeton University
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of Princeton University nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
#ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
#DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################



import sys
import getopt
import os 
import sys 
import string
from optparse import OptionParser
import time


def run_prime(config_path, output_path, progs):
    config_path = os.path.abspath(config_path)
    output_path = os.path.abspath(output_path)
    timestr = time.strftime("%Y%m%d")
    cmd_num = 1
    
    while os.path.exists(prime_path+'/cmd/run_'+timestr+'_'+str(cmd_num)):
        cmd_num += 1
    cmd_path = prime_path+'/cmd/run_'+timestr+'_'+str(cmd_num)
    f = open(cmd_path, 'w')
    f.write('#!/bin/bash\n')

    config_path_prime = os.path.splitext(config_path)[0] + "_prime.xml"
    f.write('mpiexec --verbose --bind-to none -np 1 '
            +prime_path+'/bin/prime ' + config_path_prime + ' ' +output_path)

    config_path_pin = os.path.splitext(config_path)[0] + "_pin.xml"
    for prog in progs:
        f.write(' : -np 1 pin -ifeellucky -t '+prime_path+'/bin/prime.so -c ' + config_path_pin +' -o ' + output_path + ' -- ' + prog)

    f.write('\n')
    f.close()
    os.system('chmod +x ' + cmd_path)
    os.system(cmd_path)


prime_path  = os.environ.get('PRIME_PATH') 

def main():
   usage = '''
   run_prime [options] prog1 prog2 ...
   '''
   
   parser = OptionParser(usage=usage)
   parser.add_option("-c", "--config_path",
                      dest="config_path", default=prime_path + "/xml/config.xml",
                      metavar="CONFIG_PATH", help="use CONFIG_PATH to configure the simulated system, the default configuration path is xml/config.xml")
   parser.add_option("-o", "--output_path",
                      dest="output_path", default=prime_path + "/output/config.out",
                      metavar="OUTPUT_PATH", help="write the report to OUTPUT_PATH, the default output path is output/config.out")

   (options, args) = parser.parse_args()
   if len(args) < 1:
        parser.error("Incorrect number of arguments")
   run_prime(options.config_path, options.output_path, args)


if __name__ == "__main__":
   main()
